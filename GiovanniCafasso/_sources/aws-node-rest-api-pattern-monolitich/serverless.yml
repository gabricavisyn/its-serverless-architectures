service: sls-rest-api-pattern-monolitich

frameworkVersion: ">=1.1.0"

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-central-1
  profile: serverless-admin
  environment:
    DYNAMODB_TABLE_TODOS: ${self:service}-${opt:stage, self:provider.stage}
    DYNAMODB_TABLE_TODOS_RICH: ${self:service}-${opt:stage, self:provider.stage}-RICH
  iamRoleStatements:
  #ne faccio 2 perchè ho assegnato un arn diverso tra le 2 tabelle
    - Effect: Allow       #per la prima entità: DYNAMODB_TABLE_TODOS
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_TODOS}"
    - Effect: Allow       #per la seconda entità: DYNAMODB_TABLE_TODOS_RICH
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_TODOS_RICH}"  

functions:  #una sola function
  monolitich-handler:     #capisco che è monolitich perchè abbiamo tutto in una sola funzione
    handler: monolitich-handler.handler   #file in cui troverà la funzione definita per ogni verbo (monolitich-handler.js)
    events:                               #.handler anzichè .js
      - http:
          path: todos
          method: post
          cors: true
      - http:
          path: todos
          method: get
          cors: true
      - http:
          path: todos/{id}
          method: get
          cors: true
      - http:
          path: todos/{id}
          method: put
          cors: true          
      - http:
          path: todos/{id}
          method: delete
          cors: true  
resources:
  Resources:
    TodosDynamoDbTable:   #primo DB
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_TODOS}
    TodosRichDynamoDbTable:   #secondo DB
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_TODOS_RICH}    
