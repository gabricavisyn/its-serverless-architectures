service: sls-rest-api-pattern-monolitich

frameworkVersion: ">=1.1.0"

provider:
  name: aws
  runtime: nodejs10.x
  region: us-east-1
  profile: serverless-admin
  environment:
    DYN_T_TODOS: ${self:service}-${opt:stage, self:provider.stage}-todos
    DYN_T_TODO_RICH: ${self:service}-${opt:stage, self:provider.stage}-todo_rich
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYN_T_TODOS}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYN_T_TODO_RICH}"  

functions:
  monolitich-handler:
    handler: monolitich-handler.handler
    events:
      - http:
          path: todos
          method: post
          cors: true
      - http:
          path: todos
          method: get
          cors: true
      - http:
          path: todos/{id}
          method: get 
          cors: true
      - http:
          path: todos/{id}
          method: put
          cors: true          
      - http:
          path: todos/{id}
          method: delete
          cors: true
      - http:
          path: todo_rich
          method: post
          cors: true
      - http:
          path: todo_rich
          method: get
          cors: true
      - http:
          path: todo_rich/{id}
          method: get
          cors: true
      - http:
          path: todo_rich/{id}
          method: put
          cors: true          
      - http:
          path: todo_rich/{id}
          method: delete
          cors: true 
resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYN_T_TODOS}
    Todo_RichDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYN_T_TODO_RICH}    